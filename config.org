* Emacs, the One True Editor
#+begin_src emacs-lisp
;; "Emacs outshines all other editing software in approximately the
;; same way that the noonday sun does the stars. It is not just bigger
;; and brighter; it simply makes everything else vanish."
;;
;;          - Neal Stephenson, "In the Beginning was the Command Line"
#+end_src
* init.el dev helpers
#+PROPERTY: header-args:emacs-lisp :tangle init.el

These functions are useful when iterating over some complicated configs
#+begin_src emacs-lisp

(defun my/reload-init-file ()
  "Reload the Emacs init file and the custom file."
  (interactive)
  (load-file "~/.emacs.d/init.el")
  (load-file (concat user-emacs-directory "custom.el")))

  (global-set-key (kbd "C-c C-x C-r") 'my/reload-init-file)

  ;; This block creates a key binding to wrap a block of code in org mode source code block tags
  (defvar my/org-last-src-lang "emacs-lisp"
    "Store the last used language for org source blocks.")

  (defun my/org-insert-or-wrap-src-block ()
    "Insert a new src block or wrap existing region in src block, with language prompt."
    (interactive)
    (let* ((completion-ignore-case t)
           (lang (completing-read (format "Language (%s): " my/org-last-src-lang)
                                  (mapcar #'car org-babel-load-languages)
                                  nil t nil nil my/org-last-src-lang))
           (final-lang (if (string-empty-p lang) my/org-last-src-lang lang))
           (src-block (concat "#+begin_src " final-lang "\n"
                              (when (use-region-p)
                                (buffer-substring-no-properties (region-beginning) (region-end)))
                              "\n#+end_src\n")))
      (if (use-region-p)
          (delete-region (region-beginning) (region-end)))
      (insert src-block)
      (setq my/org-last-src-lang final-lang)
      (when (use-region-p)
        (forward-line -2))))

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-x C-s") 'my/org-insert-or-wrap-src-block))

(defun my/remove-auto-mode ()
  "Remove all file associations for a selected mode from `auto-mode-alist`."
  (interactive)
  (let ((mode-set (seq-uniq (mapcar 'cdr (seq-filter (lambda (item) (symbolp (cdr item))) auto-mode-alist))))
        selected-mode)
    (setq selected-mode (intern (completing-read "Select mode to remove: " (mapcar 'symbol-name mode-set) nil t)))
    (setq auto-mode-alist (seq-remove (lambda (item) (eq (cdr item) selected-mode)) auto-mode-alist))
    (message "Removed all associations for %s mode" (symbol-name selected-mode))))

#+end_src

* Basic Global Settings
#+begin_src emacs-lisp
  ;; basic global settings
  (setq inhibit-startup-message t)  ; Disables the startup message buffer
  (menu-bar-mode -1)                ; Disables the menu bar
  (tool-bar-mode -1)                ; Disables the tool bar
  (blink-cursor-mode -1)            ; Disables the blinking cursor
  (scroll-bar-mode -1)              ; Disables the scroll bar
  (defalias 'yes-or-no-p 'y-or-n-p) ; y/n >= yes/no

  ;; Highlight matching parentheses when the point is on them.
  (show-paren-mode 1)

  ;; ffap: aka most annoying feature ever. This flag enforces C-u prefix
  ;; so that I may never ever feel its affects. For the love of all that
  ;; is holy, even the docs know it sucks: M-x describe-variable
  ;; ffap-require-prefix says "Experts may prefer to disable ffap most
  ;; of the time." Consider me an expert.
  (setq ffap-require-prefix t)

  ;; almost always coding, almost always want column numbers...
  (setq column-number-mode t)

  ;; Font size keybinding
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; use ctrl-x,c,v for cut,copy,paste, ctrl-z for undo, plus fancy
  ;; rectangle mode
  (cua-mode t)

  ;; ibuffer > buffer manager
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; allow lines to be moved up and down like org-mode does it
  (defun my/move-line (n)
    "Move the current line up or down by N lines."
    (let ((col (current-column)))
      (beginning-of-line)
      (when (or (> n 0) (not (bobp))) ; Check if not beginning of buffer when moving up
        (forward-line 1)
        (transpose-lines n))
      (forward-line -1)
      (forward-char col)))

  (defun my/move-line-up ()
    "Move the current line up."
    (interactive)
    (my/move-line -1))

  (defun my/move-line-down ()
    "Move the current line down."
    (interactive)
    (my/move-line 1))

  (global-set-key (kbd "M-<up>") 'my/move-line-up)
  (global-set-key (kbd "M-<down>") 'my/move-line-down)

  ;; utf-8 all the things
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-charset-priority 'unicode)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

  ;; I don't know when trailing whitespace is useful
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; emacs doesn't have this set by default for some reason...
  (setq xref-auto-jump-to-first-xref 'show)

  ;; I like to indent most files on save like programming
  ;; languages. This is used by conf file modes mostly.
  (defun my/indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max))))

#+end_src

* State Management/File Locations
#+begin_src emacs-lisp

;; create a state dir
(defvar my/emacs-state-directory (expand-file-name "state/" user-emacs-directory)
  "Directory for Emacs state files like backups and auto-saves.")

(unless (file-exists-p my/emacs-state-directory)
  (make-directory my/emacs-state-directory t))

;; backups
(setq backup-directory-alist `((".*" . ,(concat my/emacs-state-directory "backups/"))))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq backup-by-copying t)

;; auto-save
(setq auto-save-directory (expand-file-name "auto-save-list/" my/emacs-state-directory))
(setq auto-save-list-file-prefix auto-save-directory)
(setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))

;; tramp
(setq tramp-auto-save-directory auto-save-directory)
(setq tramp-persistency-file-name (concat my/emacs-state-directory "tramp-persistency"))

;; lockfiles
(setq create-lockfiles nil)

;; desktop
(setq desktop-path (list my/emacs-state-directory))
(desktop-save-mode 1)

;; List of authentication sources.
;; Each entry is the authentication type with optional properties.
;; Entries are tried in the order in which they appear.
(setq auth-sources `(,(concat my/emacs-state-directory "auth-sources")))

;; transient is built in, and used by other packages
(setq transient-history-file (expand-file-name "transient/history.el" my/emacs-state-directory))

#+end_src

* Setup Package/Use Package
#+begin_src emacs-lisp
    (require 'package)

    ;; set archives
    (setq package-archives
	  '(("gnu" . "http://elpa.gnu.org/packages/")
	    ("melpa" . "https://melpa.org/packages/")
	    ;; ("melpa-stable" .  "https://stable.melpa.org/packages/")
	    ))
    (package-initialize)

    (unless package-archive-contents
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)

    (require 'use-package-ensure)
    (setq use-package-always-ensure t)

    (use-package use-package-ensure-system-package)
#+end_src

* Org Mode
#+begin_src emacs-lisp
;; Ensure Org mode is properly indented
(setq org-startup-indented t)

;; Adjust the level of indentation (optional, set as per your preference)
(setq org-indent-indentation-per-level 2)

;; In src blocks, don't indent.
(setq org-edit-src-content-indentation 0)

;; tree visibility niceties
(setq org-startup-indented t)

;; enable native syntax highlighting for source code blocks
(setq org-src-fontify-natively t)

;; log time completed when moving todo to DONE
(setq org-log-done 'time)

;; don't accidentally edit when not showing text
(setq org-catch-invisible-edits 'show)

;; auto-save org files after some time so that I can switch between
;; devices without dataloss/conflicts
(add-hook 'auto-save-hook 'org-save-all-org-buffers)

;; babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t) (dot . t) (sql . t) (sql . t) (python . t) (js . t) (css . t) (shell . t) (sass . t) (org . t) (rust . t)))

;; keywords
(setq org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "PAUSED(p)" "WAITING(w)" "FINALIZE(f)" "|" "DONE(d)" "MISSED(m)" "CANCELLED(c)")
                          (sequence "NOTE(n)" "|" "ARCHIVED(a)" )))
(setq org-todo-keyword-faces
      '(("TODO" :foreground "tomato" :weight bold)
        ("PAUSED" :foreground "tomato" :weight bold)
        ("IN-PROGRESS" :foreground "#009900" :weight bold)
        ("FINALIZE" :foreground "yellow")
        ("WAITING" :foreground "yellow")
        ("DONE" :foreground "#6aa84f")
        ("MISSED" :foreground "#6aa84f")
        ("CANCELLED" :foreground "#6aa84f")
        ("ARCHIVED" :foreground "#6aa84f")
        ("NOTE" :foreground "orange")))


;; key bindings
(defun my/org-back-to-indentation ()
  "Move point to the first non-whitespace & non-headline asterisk character on this line."
  (interactive "^")
  (if org-special-ctrl-a/e
      (org-beginning-of-line 1)
    (beginning-of-line 1))
  (skip-syntax-forward " _" (line-end-position))
  ;; Move back over chars that have whitespace syntax but have the p flag.
  (backward-prefix-chars))

(defun my/set-org-mode-bindings ()
  "Keybindings for Org mode."
  ;; Uncomment the next line if you have a specific binding for 'org-insert-heading-respect-content
  ;; (local-set-key (kbd "ESC-M-<RET>") 'org-insert-heading-respect-content)
  ;; make ctrl-a org-aware
  (setq org-special-ctrl-a/e t)
  (local-set-key (kbd "M-m") 'my/org-back-to-indentation))

(defun my/set-org-src-mode-bindings ()
  "Keybindings for `org-src-mode'."
  (local-set-key (kbd "M-<up>") 'my/move-line-up)
  (local-set-key (kbd "M-<down>") 'my/move-line-down)
  (local-set-key (kbd "C-c C-c") 'org-edit-src-exit))

(with-eval-after-load 'org
  (add-hook 'org-mode-hook #'visual-line-mode)
  (add-hook 'org-mode-hook 'my/set-org-mode-bindings)
  (add-hook 'org-src-mode-hook 'my/set-org-src-mode-bindings))

    ;;;;; org-mode has some keybindings I disagree with
    ;;;(remove-hook 'org-metadown-hook #'org-babel-pop-to-session-maybe)
    ;;;(remove-hook 'org-metaup-hook #'org-babel-load-in-session-maybe)
    ;;;(with-eval-after-load 'org-src
    ;;;  (define-key org-src-mode-map (kbd "M-<up>") 'my/move-line-up)
    ;;;  (define-key org-src-mode-map (kbd "M-<down>") 'my/move-line-down))

;; helper packages for html exporting
(use-package htmlize
  :ensure t)

(use-package ox-html
  :ensure org  ; Ensure ox-html is installed as part of the org package
  :config
  ;; Basic setup
  (setq org-html-doctype "html5"                  ; Use HTML5 doctype
        org-html-html5-fancy t                    ; Enable HTML5 features
        org-html-validation-link nil              ; Disable validation link
        org-html-head-include-scripts nil         ; Do not include default scripts
        org-html-head-include-default-style nil)  ; Do not include default CSS

  ;; Custom CSS and JavaScript
  (setq org-html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />")
  ;; (setq org-html-scripts "<script src=\"scripts.js\"></script>")

  ;; Export settings
  (setq org-export-with-html-style nil       ; Do not include default HTML styles
        org-export-with-section-numbers 0    ; Do not number sections
        org-export-with-toc nil              ; Do not generate a table of contents
        org-export-with-author nil           ; Do not include the author's name
        org-export-with-creator nil          ; Do not include the Org/Emacs creator info
        org-export-with-sub-superscripts '{} ; Use '{}' as super-/subscript markers
        org-html-self-link-headlines nil     ; Create anchors for headlines
        org-html-preamble nil                ; Disable preamble by default
        org-html-postamble nil)              ; Disable the HTML postamble

  ;; Set to 't' to enable syntax highlighting code in exported HTML
  (setq org-html-htmlize-output-type 'inline-css)

  ;; Ensure proper loading of ox-html
  :after org)
#+end_src
* Directory Listings
#+begin_src emacs-lisp
(setq dired-listing-switches "-lav --group-directories-first")
#+end_src
* Key Bindings Pop-up
~which-key~ provides pop-up showing available key bindings
#+begin_src emacs-lisp
(use-package which-key)
(which-key-mode)
#+end_src
* Magit is the greatest gift since git itself

#+begin_src emacs-lisp

;; magit requires bookmark, and we want to customize so require it here
(use-package bookmark
  :config
  (setq bookmark-default-file (concat my/emacs-state-directory "bookmarks")))

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  :config
  (setq magit-highlight-whitespace nil)
  (setq magit-highlight-trailing-whitespace nil)
  (setq magit-highlight-indentation nil)
  (setq magit-save-repository-buffers 'dontask)
  (global-set-key (kbd "C-x g") 'magit-status))

(defun generate-github-link ()
 "Generate GitHub link for current file and copy it to clipboard."
 (interactive)
 (when (and (buffer-file-name) (magit-inside-worktree-p))
    (let* ((repo (file-name-nondirectory (directory-file-name (magit-toplevel))))
           (branch (magit-get-current-branch))
           (full-path (expand-file-name buffer-file-name))
           (relative-path (substring full-path (length (magit-toplevel))))
           (line-number (int-to-string (line-number-at-pos))))
      (let ((link (concat "https://github.com/" "teamsense/" repo "/blob/" branch "/" relative-path "#L" line-number)))
        (kill-new link)
        (message link)))))

#+end_src

* Search with ripgrep
#+begin_src emacs-lisp
(use-package rg
  :config
  (setq rg-enable-menu t)
  :ensure-system-package
  (rg . ripgrep))
(global-set-key (kbd "M-r") 'rg)
#+end_src

* Give Emacs Psychic Completion Powers

[[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Prescient.org][Emacs Tips: Prescient]]

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)

    ;; enable character folding, which is to find similar chars, such as
    ;; accented characters:
    ;; (setq search-default-mode #'char-fold-to-regexp)

    (ivy-define-key ivy-minibuffer-map (kbd "TAB") #'ivy-partial)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-use-selectable-prompt t)
    (setq ivy-magic-tilde nil))

  (use-package counsel
    :ensure t
    :bind
    ("C-s" . swiper)
    ("C-r" . ivy-resume)
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)

    ;; recommended key bindings I don't have a use for yet.
    ;;("<f1> f" . counsel-describe-function)
    ;;("<f1> v" . counsel-describe-variable)
    ;;("<f1> o" . counsel-describe-symbol)
    ;;("<f1> l" . counsel-find-library)
    ;;("<f2> i" . counsel-info-lookup-symbol)
    ;;("<f2> u" . counsel-unicode-char)
    ;;("C-c g" . counsel-git)
    ;;("C-c j" . counsel-git-grep)
    ;;("C-c k" . counsel-ag)
    ;;("C-x l" . counsel-locate)

    :init
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

  (use-package hydra)

  (use-package ivy-hydra
    :after ivy hydra)

  (use-package prescient
    :config
    (setq prescient-save-file (expand-file-name "prescient-save.el" my/emacs-state-directory))
    (prescient-persist-mode 1))

  (use-package ivy-prescient
    :after counsel
    :config
    (ivy-prescient-mode 1))

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1))

  (use-package ivy-xref
    :after ivy
    :config
    (setq xref-show-xrefs-function 'ivy-xref-show-xrefs))

#+end_src

* Snippets support
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
#+end_src

* Hide/Show Minor Mode
#+begin_src emacs-lisp
;; Ensure hideshow is loaded
(require 'hideshow)

;; Define a function to enable hs-minor-mode and set up the keybinding
(defun my/enable-hs-minor-mode ()
 "Enable hs-minor-mode and set up the Ctrl-C Tab keybinding."
 (hs-minor-mode 1)
 (local-set-key (kbd "C-c TAB") 'my/toggle-hs-block))

;; Define a function to toggle blocks using hs-show-block and hs-hide-block
(defun my/toggle-hs-block ()
 "Toggle visibility of the current block."
 (interactive)
 (if (hs-already-hidden-p)
      (hs-show-block)
    (hs-hide-block)))
#+end_src
* ediff tweaks
Set ediff to use horizontal windows always
#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
* Python
** Functions to setup paths

#+begin_src emacs-lisp
(defun my/locate-dominating-pipenv ()
  "Locate the Pipenv binary based on Python version from .tool-versions."
  (when-let ((dir (locate-dominating-file default-directory ".tool-versions")))
    (with-temp-buffer
      (insert-file-contents (expand-file-name ".tool-versions" dir))
      (goto-char (point-min))
      (when (re-search-forward "^python \\(.*\\)$" nil t)
        (let ((pipenv-path (concat "/home/karim/.asdf/installs/python/" (match-string 1) "/bin/pipenv")))
          (when (file-executable-p pipenv-path)
            pipenv-path))))))

(defun my/find-pipenv-venv-path ()
  "Find the virtual environment path for the current Pipenv project."
  (when-let* ((pipenv-bin (my/locate-dominating-pipenv))
              (project-dir (locate-dominating-file default-directory "Pipfile")))
    (let ((venv-path (string-trim-right (shell-command-to-string (concat pipenv-bin " -q --venv")))))
      (unless (string-empty-p venv-path)
        venv-path))))

(defun my/setup-venv-paths ()
  "Set the env PATH and exec-path variables based on the virtual environment."
  (when-let* ((venv-path (my/find-pipenv-venv-path))
              (python-bin-path (concat venv-path "/bin")))
    ;; Update exec-path
    (setq exec-path (cl-remove-if (lambda (p) (string-match-p "\\.venv.*/bin" p)) exec-path))
    (add-to-list 'exec-path python-bin-path)
    ;; Update PATH
    (let ((path-list (split-string (getenv "PATH") ":")))
      (setq path-list (cl-remove-if (lambda (p) (string-match-p "\\.venv.*/bin" p)) path-list))
      (setenv "PATH" (mapconcat 'identity (cons python-bin-path path-list) ":")))
    ;; Set python interpreter
    (setq python-shell-interpreter (concat python-bin-path "/python"))))
#+end_src

** setup python mode
#+begin_src emacs-lisp
(use-package poetry
  :ensure t
  :hook (python-mode . poetry-tracking-mode))

(use-package python-black
  :demand t
  :after python)

(use-package isortify
  :hook (python-mode . isortify-mode))

(defun my/python-format-buffer ()
  "Format buffer with isort and then black."
  (when (eq major-mode 'python-mode)
    (isortify-buffer)
    (python-black-buffer)))

(defun my/setup-python ()
  "Setup for Python mode with LSP."
  (lsp-deferred)
  (my/setup-venv-paths)

  ;; Disable LSP as the primary syntax checker for Python in Flycheck
  (setq-local flycheck-disabled-checkers '(lsp))

  ;; Set Flake8 as the preferred syntax checker
  (flycheck-select-checker 'python-flake8)

  ;; Enable automatic formatting on save using Black and Isort
  (add-hook 'before-save-hook 'my/python-format-buffer nil t)

  ;; enable hideshow minor mode
  (my/enable-hs-minor-mode))

(add-hook 'python-mode-hook 'my/setup-python)
#+end_src

** reference                                                      :noexport:
https://github.com/chantera/python-lsp-isort
https://github.com/python-lsp/python-lsp-black

#+begin_src
  ##
  ## Make sure the supporting packages are installed
  ##
  pip install python-lsp-black
  pip install python-lsp-isort
  pip install flake8
  pip install pylint
#+end_src

* Typescript/JS
** asdf
#+begin_src emacs-lisp
  (defun my/list-installed-node-versions ()
    "List installed Node.js versions."
    (let ((node-dir "/home/karim/.asdf/installs/nodejs/"))
      (directory-files node-dir nil "^[0-9]")))

  (defun my/set-node-version (version)
    "Set the Node.js version setting the asdf install dir in $PATH"
    (let ((node-path (concat "/home/karim/.asdf/installs/nodejs/" version "/bin"))
          (path-separator ":"))
      ;; Filter out existing Node.js paths from exec-path
      (setq exec-path (cl-remove-if (lambda (p) (string-match-p "/.asdf/installs/nodejs/" p)) exec-path))
      ;; Add the new Node.js path to exec-path
      (add-to-list 'exec-path node-path)

      ;; Filter out existing Node.js paths from PATH
      (let ((path-list (split-string (getenv "PATH") path-separator)))
        (setq path-list (cl-remove-if (lambda (p) (string-match-p "/.asdf/installs/nodejs/" p)) path-list))
        ;; Add the new Node.js path to PATH
        (setenv "PATH" (mapconcat 'identity (cons node-path path-list) path-separator)))

      (message "Switched to Node.js version %s:\n\t%s\n\t%s" version (getenv "PATH") exec-path)))

  (defun choose-node-version ()
    "Interactive command to choose and set the Node.js version."
    (interactive)
    (let* ((versions (my/list-installed-node-versions))
           (version (completing-read "Select Node version: " versions nil t)))
      (when version
        (my/set-node-version version))))

  (defun my/find-and-set-node-version ()
    "Find the .tool-versions dominating file and set the Node.js version."
    (let ((dir (locate-dominating-file default-directory ".tool-versions")))
      (when dir
        (with-temp-buffer
          (insert-file-contents (expand-file-name ".tool-versions" dir))
          (goto-char (point-min))
          (when (re-search-forward "^nodejs \\(.*\\)$" nil t)
            (my/set-node-version (match-string 1)))))))
#+end_src

** modes
#+begin_src emacs-lisp
  ;; Install prettier-js if not already installed
  (use-package prettier-js
    :ensure t)

  ;; web-mode for .ts and .tsx
  (use-package web-mode
    :ensure t
    :init
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JavaScript/TypeScript
    (setq web-mode-enable-auto-quoting nil)
    :mode ("\\.ts\\'" "\\.tsx\\'"))

  ;; JavaScript and JSX modes
  (use-package js2-mode
    :ensure t
    :mode ("\\.js\\'" "\\.cjs\\'" "\\.jsx\\'")
    :config
    ;; (setq js2-idle-timer-delay 0.5)  ; if needed for large files, in seconds
    :interpreter "node")

  (defun my/setup-js ()
    "general web/ts/js mode setup"
    (lsp-deferred)
    (flymake-mode-off)
    (setq tab-width 2)
    (my/find-and-set-node-version)
    (my/enable-hs-minor-mode)
    (prettier-js-mode))

  (dolist (mode-hook '(js2-mode-hook js2-jsx-mode-hook web-mode-hook))
    (add-hook mode-hook 'my/setup-js))
#+end_src

* LSP
This requires you install the language servers, don't know why they can't all be automatically installed
#+begin_src shell
# python requires you have run this inside and outside your venv
pipenv shell
pip install python-language-server[all]

# typescript server can't be automatically installed
npm install -g typescript typescript-language-server

# eslint
npm install -g eslint eslint-config-prettier eslint-plugin-react

#+end_src

#+begin_src emacs-lisp
(use-package lsp-mode
  :diminish
  :commands (lsp lsp-deferred)
  :hook (omnisharp . lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-session-file (expand-file-name "lsp/session" my/emacs-state-directory))

  :config
  ;; language support
  (add-to-list 'lsp-enabled-clients 'pylsp)
  (add-to-list 'lsp-enabled-clients 'ts-ls)
  (add-to-list 'lsp-enabled-clients 'eslint)

  ;; agnostic settings
  (lsp-enable-which-key-integration t)
  (lsp-headerline-breadcrumb-mode)

  ;; rust settings
  (add-to-list 'lsp-enabled-clients 'rust-analyzer)
  (add-to-list 'lsp-language-id-configuration '(rustic-mode . "rust"))


  ;; python settings
  (lsp-register-custom-settings
   '(("pylsp.plugins.black.enabled" t t)
     ("pylsp.plugins.flake8.enabled" t t)
     ("pylsp.plugins.isort.enabled" t t)
     ("pylsp.plugins.rope_autoimport.enabled" t t)

     ;; Disable these as they're duplicated by flake8
     ("pylsp.plugins.pycodestyle.enabled" nil t)
     ("pylsp.plugins.mccabe.enabled" nil t)
     ("pylsp.plugins.pyflakes.enabled" nil t))))

;; This enables both completions and code actions. You can switch them off by setting
;; pylsp.plugins.rope_autoimport.completions.enabled and/or pylsp.plugins.rope_autoimport.code_actions.enabled to false

(use-package lsp-ui
  :commands lsp-ui-mode)
#+end_src

* Rust
Install Rust and rust-analyzer in your shell. NOTE it is up to you to keep this in sync with asdf.
#+begin_src shell
# Install rustup and default toolchain
sudo apt install rustup
rustup install 1.84
rustup default 1.84

# Install rust-analyzer
rustup component add rust-analyzer


debug with:
(message "Rustc: %s" (executable-find "rustc"))
(message "Cargo: %s" (executable-find "cargo"))
(message "rustfmt: %s" (executable-find "rustfmt"))
(message "PATH: %s" (getenv "PATH"))
(message "%S" exec-path)


#+end_src

#+begin_src emacs-lisp
(defun my/lsp-rustic-init ()
  (unless (lsp-workspaces)
    (lsp-deferred)))

(use-package rustic
  :ensure t
  :config
  (setq rustic-lsp-server 'rust-analyzer)
  (setq rustic-format-on-save nil)                      ;; Keep rustic's formatter off
  (setq lsp-rust-analyzer-rustfmt-enable t)             ;; Use rust-analyzer's formatter
  (add-hook 'before-save-hook 'lsp-format-buffer nil t) ;; use lsp for format on save
  :hook (rustic-mode . (lambda ()
                         (my/lsp-rustic-init)
                         (add-hook 'before-save-hook #'lsp-format-buffer nil t)
                         (my/enable-hs-minor-mode))))
(use-package cargo
  :ensure t
  :hook (rustic-mode . cargo-minor-mode))
#+end_src

* Dockerfile mode

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode ("[Dd]ockerfile\\'" . dockerfile-mode))
#+end_src

* string-inflection - Programming Variable Casing
#+begin_src emacs-lisp
;; cycle through coding style cases
(use-package string-inflection
  :bind ("C-c C-u" . string-inflection-all-cycle)
  :hook (python-mode . (lambda ()
                         (local-set-key (kbd "C-c C-u") 'string-inflection-python-style-cycle)))
        (web-mode . (lambda ()
                         (local-set-key (kbd "C-c C-u") 'string-inflection-java-style-cycle)))
        (js2-mode . (lambda ()
                         (local-set-key (kbd "C-c C-u") 'string-inflection-java-style-cycle))))

#+end_src

* Recentf
~recentf~ defaults to saving in ~.emacs.d~. Configure it to use state dir
#+begin_src emacs-lisp
(use-package recentf
  :init
  (setq recentf-save-file (expand-file-name "recentf" my/emacs-state-directory))
  :config
  (recentf-mode 1))
#+end_src

* SQL


#+begin_src emacs-lisp
  (use-package sql-indent
    :ensure t
    :after sql
    :hook (sql-mode . sqlind-minor-mode))

  (use-package sql
    :ensure t
    :mode ("\\.sql\\'" . sql-mode)
    :config
    (add-hook 'sql-mode-hook
              (lambda ()
                ;; Additional SQL mode configurations can go here
                )))



#+end_src

* CSS

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))

(add-hook 'css-mode-hook
          (lambda ()
            (setq-local css-indent-offset 2)
            (add-hook 'before-save-hook 'prettier-js nil t)))
;(setq css-mode-hook nil)

(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))
(add-hook 'scss-mode-hook
          (lambda ()
            (setq-local css-indent-offset 2)
            (add-hook 'before-save-hook 'prettier-js nil t)))

(setq scss-mode-hook nil)
#+end_src

* JSON

#+begin_src emacs-lisp
(use-package json-reformat
  :ensure t)
(use-package json-snatcher
  :ensure t)
(use-package json-mode
  :ensure t)

(add-hook 'json-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)
            (setq json-reformat:indent-width 2)
            (setq indent-tabs-mode nil)
            (prettier-js-mode)
            ;; add a hook for HideShow mode
            (add-hook 'json-mode-hook 'hs-minor-mode)
            ;; Add a save hook to format with Prettier
            (add-hook 'before-save-hook 'prettier-js nil t)))

(defun json-unescape-region (start end)
  "Unescape JSON in region between START and END."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region start end)
      (goto-char (point-min))
      (while (search-forward "\\\"" nil t)
        (replace-match "\"" nil t))
      (goto-char (point-min))
      (while (search-forward "\\n" nil t)
        (replace-match "\n" nil t))
      (goto-char (point-min))
      (while (search-forward "\\/" nil t)
        (replace-match "/" nil t))
      (goto-char (point-min))
      (while (search-forward "\\t" nil t)
        (replace-match "\t" nil t)))))

(defun json-unescape-buffer ()
  "Unescape JSON in entire buffer."
  (interactive)
  (json-unescape-region (point-min) (point-max)))

(defun json-reformat-buffer ()
  "Reformat JSON in entire buffer."
  (interactive)
  (json-reformat-region (point-min) (point-max)))
#+end_src

* YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode ("\\.yml\\'" "\\.yaml\\'")
  :hook (yaml-mode . (lambda ()
                       ;; Indentation settings
                       (setq indent-tabs-mode nil)
                       (setq yaml-indent-offset 2)))
  :config
  (add-hook 'yaml-mode-hook #'flycheck-mode))
#+end_src

* CSV Mode
#+begin_src emacs-lisp
(use-package csv-mode
  :ensure t
  :mode ("\\.csv\\'")
  :hook (csv-mode . (lambda ()
                      ;; Custom settings for CSV mode
                      (setq csv-separators '("," ";" "|" " "))
                      ))
  :config
  ;; config here
)
#+end_src

* Config files
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.env\\'" . conf-mode))
#+end_src
* Nginx
#+begin_src emacs-lisp
  (use-package nginx-mode
    :ensure t
    :mode ("\\.nginx\\'"
           "/nginx/sites-\\(?:available\\|enabled\\)/"
           "\\.*nginx\\.conf\\'")
    :hook (nginx-mode . (lambda ()
                          (add-hook 'before-save-hook 'my/indent-buffer nil 'local))))

  (use-package company-nginx
    :ensure t
    :after (nginx-mode company)
    :config
    (add-to-list 'company-backends 'company-nginx))

#+end_src
* Dockerfiles
#+begin_src emacs-lisp
;; anything that starts with "Dockerfile" is a dockerfile...
(add-to-list 'auto-mode-alist '("Dockerfile.*\\'" . dockerfile-mode))
#+end_src
* Ledger

#+begin_src emacs-lisp
;; ledger-mode
(use-package ledger-mode
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("\\.lgr$" . ledger-mode))
  (add-to-list 'auto-mode-alist '("\\.txs$" . ledger-mode))
  (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
  (setq ledger-binary-path "/usr/local/bin/ledger"))
#+end_src
* Markdown
#+begin_src emacs-lisp
;; enable editing of code blocks in indirect buffers using C-c ’
(use-package edit-indirect
  :ensure t)

(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Ruby
...just in case they make me

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Vagrantfile" . ruby-mode))
#+end_src

* GPTel
#+begin_src emacs-lisp
(use-package gptel)

#+end_src
* Mac
#+begin_src emacs-lisp
  ;; In a world where I am forced to use osx as my device driver...
  (when (eq system-type 'darwin)

    ;; Mac spell checker is aspell, assumes you homebrew installed it already
    (setq ispell-program-name "/usr/local/bin/aspell"
          mac-command-modifier 'meta
          frame-title-format '("%b")
          ring-bell-function 'ignore)

    (setq mac-allow-anti-aliasing t)

    ;; Work around a bug on OS X where system-name is FQDN
    (setq system-name (car (split-string system-name "\\.")))

    (global-set-key (kbd "M-`") 'next-multiframe-window)

    (setq ls-lisp-use-insert-directory-program nil)
    (require 'ls-lisp))
#+end_src

* X Bookmark to Direct Link Converter

#+begin_src emacs-lisp
(defun x-bookmark-to-direct-url-at-point ()
  "Convert an X (formerly Twitter) bookmark URL at point to a direct post link.
Captures text between the nearest whitespace boundaries and processes it as a URL."
  (interactive)
  (save-excursion
    (let* ((start (save-excursion (skip-chars-backward "^ \t\n") (point)))
           (end (save-excursion (skip-chars-forward "^ \t\n") (point)))
           (text (buffer-substring-no-properties start end))
           (url-regex "https://x.com/i/bookmarks\\?post_id=\\([0-9]+\\)"))
      (if (string-match url-regex text)
          (let ((post-id (match-string 1 text)))
            ;; Replace the full URL with the direct link
            (delete-region start end)
            (insert (concat "https://x.com/i/status/" post-id)))
        (error "No valid X bookmark URL found at point")))))
#+end_src

* Customize
#+begin_src emacs-lisp
;; custom settings live where I can check them into vcs
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file)
#+end_src

* Tangle
This local variables section ensures that we save init.el on save
#+begin_src conf
# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle nil t)
# End:
#+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook #'org-babel-tangle nil t)
# End:
